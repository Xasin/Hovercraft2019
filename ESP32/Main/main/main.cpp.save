
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_event_loop.h"
#include "esp_pm.h"
#include "esp_timer.h"
#include "esp32/pm.h"
#include "nvs_flash.h"
#include "driver/gpio.h"
#include "driver/rtc_io.h"

#include "hovercraft/level0.h"
#include "hovercraft/level1.h"
#include "hovercraft/telemetry.h"

#include "esp_log.h"

#include "xasin/mqtt/Handler.h"

#include "xasin/smolhttp/Server.h"
#include "xasin/smolhttp/Endpoint.h"
#include "xasin/smolhttp/HTTPPropChannel.h"

#include "xasin/propertypoint/PropertyHandler.h"
#include "xasin/propertypoint/PropActuator.h"

using namespace Xasin;

esp_err_t event_handler(void *ctx, system_event_t *event)
{
	Xasin::MQTT::Handler::try_wifi_reconnect(event);
	return ESP_OK;
}

#include "xasin/QuadrPropeller.h"

Xasin::Drone::quad_fact_t factors = {
	0.00501, 0.065, 1.32
};
auto testProp = Xasin::Drone::QuadrPropeller(factors, HVR::LVL0::rawMotors, 0);

float oldMotor = 0;
void smooth_set(float newMotor) {
	for(float j=0; j<1; j+=0.01) {
		vTaskDelay(4);

		auto n_value = (oldMotor*(1-j) + newMotor*j);
		testProp.set_newtons(n_value);
	}

	oldMotor = newMotor;
}

extern "C" void app_main(void)
{
    nvs_flash_init();
    tcpip_adapter_init();
    ESP_ERROR_CHECK( esp_event_loop_init(event_handler, NULL) );

    esp_timer_init();

    esp_pm_config_esp32_t power_config = {};
    power_config.max_freq_mhz = 240;
	power_config.min_freq_mhz = 240;
	power_config.light_sleep_enable = false;
    esp_pm_configure(&power_config);

    Xasin::MQTT::Handler::start_wifi("TP-LINK_84CDC2\0", "f36eebda48\0");

    HVR::LVL0::init();
    HVR::LVL1::init();
	HVR::Telemetry::init();

    enum mode_t {
    	ARMING,
		NORMAL,
    } mode = ARMING;
    TickType_t init_ticks = xTaskGetTickCount() + 10000;


	init_
    for(int j = 1000; j>=0; j--) {
		for(int i=0; i<3; i++)
			HVR::LVL0::rawMotors.send_cmd(i, HVR::LVL0::rawMotors.STOP);
		vTaskDelay(2);
    }
    vTaskDelay(10);
	for(int j = 1500; j >= 0; j--) {
		for(int i=0; i<3; i++) {
			HVR::LVL0::rawMotors.send_cmd(i, HVR::LVL0::rawMotors.SPIN_3D);
		}
		vTaskDelay(1);
	}
	vTaskDelay(10);
	for(int j = 1500; j >= 0; j--) {
		for(int i=0; i<3; i++) {
			HVR::LVL0::rawMotors.send_cmd(i, HVR::LVL0::rawMotors.SAVE_SETTING);
		}
		vTaskDelay(1);
	}


    while (true) {
    	vTaskDelay(2);

    	switch(mode) {
    	case ARMING:
    		for(int i=0; i<3; i++)
    		    HVR::LVL0::rawMotors.set_motor_power(i, 0.07);

    		if(init_ticks < xTaskGetTickCount()) {
    			mode = NORMAL;
    		}
    	break;

    	case NORMAL:
    		auto t_fwd = HVR::Telemetry::control_inputs[0];
    		auto t_rot = HVR::Telemetry::control_inputs[1];

    		HVR::LVL1::axes_thrust_targets[1] = t_fwd + t_rot;
       		HVR::LVL1::axes_thrust_targets[0] = t_fwd - t_rot;

        	HVR::LVL1::push_motors();
    	break;
    	}
    }
}

